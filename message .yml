version: "3.8"

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USERNAME}", "-p${DB_PASSWORD}"]
      interval: 5s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"      # 메시징 포트
      - "15672:15672"    # 관리 UI 포트
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    restart: always
    environment:
      - node.name=elasticsearch
      - cluster.name=paper-summary-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"  # EC2 리소스에 맞게 조정
      - xpack.security.enabled=false
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    # nori 플러그인 설치를 위한 커스텀 명령어
    command: >
      bash -c '
        echo "Installing nori plugin..." &&
        bin/elasticsearch-plugin install analysis-nori --batch &&
        echo "Nori plugin installation completed" &&
        exec /usr/local/bin/docker-entrypoint.sh
      '

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:8.11.0
  #   container_name: kibana
  #   restart: always
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #     - SERVER_NAME=kibana
  #     - SERVER_HOST=0.0.0.0
  #   ports:
  #     - "5601:5601"
  #   networks:
  #     - app-network
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -s http://localhost:5601/api/status >/dev/null || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 60s
  
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  springboot-app:
    image: ${SPRINGBOOT_APP_IMAGE_REPOSITORY}:${SPRINGBOOT_APP_IMAGE_TAG}
    container_name: springboot-app
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "443:443"
    environment:
      SPRING_PROFILES_ACTIVE: ${ENVIRONMENT}
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      CLIENT_ID_GITHUB: ${GITHUB_CLIENT_ID}
      CLIENT_SECRET_GITHUB: ${GITHUB_CLIENT_SECRET}
      REDIRECT_URI_GITHUB: ${GITHUB_REDIRECT_URI}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      AWS_S3_SUMMARY_BUCKET_NAME: ${AWS_S3_SUMMARY_BUCKET_NAME}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_QUEUE_NAME: ${RABBITMQ_QUEUE_NAME}
      MINERU_PARSING_URL: ${MINERU_PARSING_URL}
      ELASTICSEARCH_URI: ${ELASTICSEARCH_URI}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      SSL_KEY_STORE: ${SSL_KEY_STORE}
      SSL_KEY_STORE_PASSWORD: ${SSL_KEY_STORE_PASSWORD}
      SSL_KEY_STORE_TYPE: ${SSL_KEY_STORE_TYPE}
      SSL_KEY_ALIAS: ${SSL_KEY_ALIAS}
    volumes:
      - /home/ubuntu/app/logs:/logs
    networks:
      - app-network
  summary-worker:
   image: summary-worker:latest
   restart: always
   env_file:
     - ../summary-worker/.env
   depends_on:
     rabbitmq:
       condition: service_healthy
   ports:
     - "8000:8000"
   networks:
     - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
  rabbitmq_data:
  elasticsearch_data:
  redis_data: