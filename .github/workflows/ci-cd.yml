name: Backend CI/CD

on:
  pull_request:
    types: [ opened, synchronize, closed ]
    branches: [ dev, main ]
    paths:
      - 'src/**'
      - 'routes/**'
      - 'controllers/**'
      - 'services/**'
      - 'utils/**'
      - 'models/**'
      - 'middleware/**'
      - 'config/**'
      - 'package.json'
      - 'package-lock.json'
      - 'docker/**'
      - '.github/**'

env:
  REGISTRY: ${{ secrets.ECR_REGISTRY }}
  REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  # Security and validation checks
  security-scan:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # Environment setup
  set-environment:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-environment.outputs.environment }}
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set environment
        id: set-environment
        run: |
          echo "Target Branch -> ${{ github.base_ref }}"
          echo "environment=dev" >> $GITHUB_OUTPUT
          if [[ ${{ github.base_ref }} == "main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          fi
      
      - name: Set version
        id: set-version
        run: |
          if [[ ${{ github.base_ref }} == "main" ]]; then
            echo "version=$(date +%Y.%m.%d)-${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
          else
            echo "version=dev-${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
          fi
      
      - name: Check environment
        run: |
          echo "Environment: ${{ steps.set-environment.outputs.environment }}"
          echo "Version: ${{ steps.set-version.outputs.version }}"

  # Build and push Docker image
  build-and-push:
    runs-on: ubuntu-latest
    needs: [ set-environment ]
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: [ "${{ needs.set-environment.outputs.environment }}" ]
    environment: ${{ matrix.environment }}
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        env:
          NODE_ENV: ${{ matrix.environment }}
        run: npm run build
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Verify ECR login
        run: |
          echo "ECR Registry: ${{ steps.login-ecr.outputs.registry }}"
          aws ecr describe-repositories --repository-names ${{ env.REPOSITORY }} || \
          aws ecr create-repository --repository-name ${{ env.REPOSITORY }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}
          tags: |
            type=raw,value=latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          platforms: linux/amd64

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: runner
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=${{ matrix.environment }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy application
  deploy:
    runs-on: ubuntu-latest
    needs: [ set-environment, build-and-push ]
    strategy:
      matrix:
        environment: [ "${{ needs.set-environment.outputs.environment }}" ]
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to EC2
        id: deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/project
            
            # Backup current deployment
            if [ -f docker-compose.yml ]; then
              cp docker-compose.yml docker-compose.backup.yml
              cp .env .env.backup
            fi
            
            # Create .env file
            cat <<EOF > .env
            EXPRESS_APP_IMAGE_REPOSITORY=${{ env.REGISTRY }}/${{ env.REPOSITORY }}
            EXPRESS_APP_IMAGE_TAG=latest
            NODE_ENV=${{ matrix.environment }}
            API_PORT=${{ secrets.API_PORT }}
            PORT=${{ secrets.API_PORT || '8889' }}
            
            # Database
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            
            # Security
            EXPRESS_SESSION_SECRET=${{ secrets.EXPRESS_SESSION_SECRET }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
            
            # AWS
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
            
            # CORS
            CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
            EOF
            
            # Set AWS credentials
            export AWS_REGION=${{ secrets.AWS_REGION }}
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            
            # Login to ECR
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.REGISTRY }}
            
            # Force pull new image
            sudo docker pull ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:latest
            
            # Stop and remove existing container (force stop)
            sudo docker-compose down --remove-orphans
            sudo docker container prune -f
            
            # Force remove old local image (if different from ECR)
            sudo docker rmi ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:latest --force || true
            
            # Deploy with forced recreation
            sudo docker-compose up -d --force-recreate --pull always
            
            # Wait for service to be ready
            sleep 30
            
            # Health check
            for i in {1..10}; do
              if curl -f http://localhost:8889/health; then
                echo "Deployment successful!"
                exit 0
              fi
              echo "Waiting for service to be ready... ($i/10)"
              sleep 10
            done
            
            echo "Health check failed, rolling back..."
            if [ -f docker-compose.backup.yml ]; then
              cp docker-compose.backup.yml docker-compose.yml
              cp .env.backup .env
              sudo docker-compose up -d gamecast-api
            fi
            exit 1

  # Post-deployment verification
  post-deploy-test:
    runs-on: ubuntu-latest
    needs: [ deploy ]
    if: always() && needs.deploy.result == 'success'
    strategy:
      matrix:
        environment: [ "${{ needs.set-environment.outputs.environment }}" ]
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Run smoke tests
        run: |
          # Health check
          curl -f ${{ secrets.APP_URL }}/health
          
          # API availability check
          curl -f ${{ secrets.APP_URL }}/
          
          echo "Smoke tests passed!"

  # Cleanup on failure
  cleanup-on-failure:
    runs-on: ubuntu-latest
    needs: [ deploy ]
    if: failure()
    steps:
      - name: Cleanup failed deployment
        run: |
          echo "Deployment failed, cleanup process can be added here"
          # Add cleanup logic if needed